/* This file was automatically generated by CasADi 3.7.1.
 *  It consists of: 
 *   1) content generated by CasADi runtime: not copyrighted
 *   2) template code copied from CasADi source: permissively licensed (MIT-0)
 *   3) user code: owned by the user
 *
 */
/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) gen_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_c0 CASADI_PREFIX(c0)
#define casadi_clear CASADI_PREFIX(clear)
#define casadi_copy CASADI_PREFIX(copy)
#define casadi_densify CASADI_PREFIX(densify)
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_f1 CASADI_PREFIX(f1)
#define casadi_f2 CASADI_PREFIX(f2)
#define casadi_f3 CASADI_PREFIX(f3)
#define casadi_f4 CASADI_PREFIX(f4)
#define casadi_f5 CASADI_PREFIX(f5)
#define casadi_fill CASADI_PREFIX(fill)
#define casadi_mtimes CASADI_PREFIX(mtimes)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)
#define casadi_s2 CASADI_PREFIX(s2)
#define casadi_s3 CASADI_PREFIX(s3)
#define casadi_s4 CASADI_PREFIX(s4)
#define casadi_s5 CASADI_PREFIX(s5)
#define casadi_s6 CASADI_PREFIX(s6)
#define casadi_s7 CASADI_PREFIX(s7)
#define casadi_trans CASADI_PREFIX(trans)
#define casadi_zeros CASADI_PREFIX(zeros)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

void casadi_copy(const casadi_real* x, casadi_int n, casadi_real* y) {
  casadi_int i;
  if (y) {
    if (x) {
      for (i=0; i<n; ++i) *y++ = *x++;
    } else {
      for (i=0; i<n; ++i) *y++ = 0.;
    }
  }
}

void casadi_clear(casadi_real* x, casadi_int n) {
  casadi_int i;
  if (x) {
    for (i=0; i<n; ++i) *x++ = 0;
  }
}

void casadi_fill(casadi_real* x, casadi_int n, casadi_real alpha) {
  casadi_int i;
  if (x) {
    for (i=0; i<n; ++i) *x++ = alpha;
  }
}

void casadi_trans(const casadi_real* x, const casadi_int* sp_x, casadi_real* y,
    const casadi_int* sp_y, casadi_int* tmp) {
  casadi_int ncol_x, nnz_x, ncol_y, k;
  const casadi_int* row_x, *colind_y;
  ncol_x = sp_x[1];
  nnz_x = sp_x[2 + ncol_x];
  row_x = sp_x + 2 + ncol_x+1;
  ncol_y = sp_y[1];
  colind_y = sp_y+2;
  for (k=0; k<ncol_y; ++k) tmp[k] = colind_y[k];
  for (k=0; k<nnz_x; ++k) {
    y[tmp[row_x[k]]++] = x[k];
  }
}

#define CASADI_CAST(x,y) (static_cast<x>(y))

void casadi_densify(const casadi_real* x, const casadi_int* sp_x, casadi_real* y, casadi_int tr) {
  casadi_int nrow_x, ncol_x, i, el;
  const casadi_int *colind_x, *row_x;
  if (!y) return;
  nrow_x = sp_x[0]; ncol_x = sp_x[1];
  colind_x = sp_x+2; row_x = sp_x+ncol_x+3;
  casadi_clear(y, nrow_x*ncol_x);
  if (!x) return;
  if (tr) {
    for (i=0; i<ncol_x; ++i) {
      for (el=colind_x[i]; el!=colind_x[i+1]; ++el) {
        y[i + row_x[el]*ncol_x] = CASADI_CAST(casadi_real, *x++);
      }
    }
  } else {
    for (i=0; i<ncol_x; ++i) {
      for (el=colind_x[i]; el!=colind_x[i+1]; ++el) {
        y[row_x[el]] = CASADI_CAST(casadi_real, *x++);
      }
      y += nrow_x;
    }
  }
}

void casadi_mtimes(const casadi_real* x, const casadi_int* sp_x, const casadi_real* y, const casadi_int* sp_y, casadi_real* z, const casadi_int* sp_z, casadi_real* w, casadi_int tr) {
  casadi_int ncol_x, ncol_y, ncol_z, cc;
  const casadi_int *colind_x, *row_x, *colind_y, *row_y, *colind_z, *row_z;
  ncol_x = sp_x[1];
  colind_x = sp_x+2; row_x = sp_x + 2 + ncol_x+1;
  ncol_y = sp_y[1];
  colind_y = sp_y+2; row_y = sp_y + 2 + ncol_y+1;
  ncol_z = sp_z[1];
  colind_z = sp_z+2; row_z = sp_z + 2 + ncol_z+1;
  if (tr) {
    for (cc=0; cc<ncol_z; ++cc) {
      casadi_int kk;
      for (kk=colind_y[cc]; kk<colind_y[cc+1]; ++kk) {
        w[row_y[kk]] = y[kk];
      }
      for (kk=colind_z[cc]; kk<colind_z[cc+1]; ++kk) {
        casadi_int kk1;
        casadi_int rr = row_z[kk];
        for (kk1=colind_x[rr]; kk1<colind_x[rr+1]; ++kk1) {
          z[kk] += x[kk1] * w[row_x[kk1]];
        }
      }
    }
  } else {
    for (cc=0; cc<ncol_y; ++cc) {
      casadi_int kk;
      for (kk=colind_z[cc]; kk<colind_z[cc+1]; ++kk) {
        w[row_z[kk]] = z[kk];
      }
      for (kk=colind_y[cc]; kk<colind_y[cc+1]; ++kk) {
        casadi_int kk1;
        casadi_int rr = row_y[kk];
        for (kk1=colind_x[rr]; kk1<colind_x[rr+1]; ++kk1) {
          w[row_x[kk1]] += x[kk1]*y[kk];
        }
      }
      for (kk=colind_z[cc]; kk<colind_z[cc+1]; ++kk) {
        z[kk] = w[row_z[kk]];
      }
    }
  }
}

static const casadi_int casadi_s0[3] = {3, 3, 1};
static const casadi_int casadi_s1[3] = {3, 1, 1};
static const casadi_int casadi_s2[9] = 
  {3, 3, 0, 1, 2, 3, 0, 1,
  2};
static const casadi_int casadi_s3[8] = {3, 3, 0, 0, 1, 2, 2, 1};
static const casadi_int casadi_s4[15] = 
  {3, 3, 0, 3, 6, 9, 0, 1,
  2, 0, 1, 2, 0, 1, 2};
static const casadi_int casadi_s5[8] = {3, 3, 0, 1, 1, 2, 2, 0};
static const casadi_int casadi_s6[8] = {3, 3, 0, 1, 2, 2, 1, 0};
static const casadi_int casadi_s7[12] = 
  {3, 3, 0, 2, 4, 6, 1, 2,
  0, 2, 0, 1};

static const casadi_real casadi_c0[3] = {0., 0., 1.};

static const casadi_real casadi_zeros[9] = 
  {0., 0., 0., 0., 0., 0., 0., 0.,
  0.};

/* f:(i0[3x3],i1[3],i2[3])->(o0[3]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_int i;
  casadi_real *rr, *w0=w+0, *w1=w+3;
  const casadi_real *cs;
  /* #0: @0 = input[1][0] */
  casadi_copy(arg[1], 3, w0);
  /* #1: @1 = input[2][0] */
  casadi_copy(arg[2], 3, w1);
  /* #2: @0 = (@0+@1) */
  for (i=0, rr=w0, cs=w1; i<3; ++i) (*rr++) += (*cs++);
  /* #3: output[0][0] = @0 */
  casadi_copy(w0, 3, res[0]);
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int f(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int f_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int f_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void f_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int f_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void f_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void f_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void f_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int f_n_in(void) { return 3;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int f_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real f_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* f_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    case 2: return "i2";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* f_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* f_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s1;
    case 2: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* f_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int f_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 5;
  if (sz_res) *sz_res = 2;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 6;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int f_work_bytes(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 5*sizeof(const casadi_real*);
  if (sz_res) *sz_res = 2*sizeof(casadi_real*);
  if (sz_iw) *sz_iw = 0*sizeof(casadi_int);
  if (sz_w) *sz_w = 6*sizeof(casadi_real);
  return 0;
}

/* df_dx:(i0[3x3],i1[3],i2[3])->(o0[3x3]) */
static int casadi_f1(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real *w0=w+0;
  /* #0: @0 = zeros(3x3) */
  casadi_clear(w0, 9);
  /* #1: output[0][0] = @0 */
  casadi_copy(w0, 9, res[0]);
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int df_dx(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f1(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int df_dx_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int df_dx_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void df_dx_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int df_dx_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void df_dx_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void df_dx_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void df_dx_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int df_dx_n_in(void) { return 3;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int df_dx_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real df_dx_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* df_dx_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    case 2: return "i2";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* df_dx_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* df_dx_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s1;
    case 2: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* df_dx_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int df_dx_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 3;
  if (sz_res) *sz_res = 2;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 9;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int df_dx_work_bytes(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 3*sizeof(const casadi_real*);
  if (sz_res) *sz_res = 2*sizeof(casadi_real*);
  if (sz_iw) *sz_iw = 0*sizeof(casadi_int);
  if (sz_w) *sz_w = 9*sizeof(casadi_real);
  return 0;
}

/* df_dw:(i0[3x3],i1[3],i2[3])->(o0[3x3]) */
static int casadi_f2(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real *rr, *w0=w+0, *w1=w+3, *w2=w+6;
  const casadi_real *cs;
  /* #0: @0 = zeros(3x3,3nz) */
  casadi_clear(w0, 3);
  /* #1: @1 = ones(3x1) */
  casadi_fill(w1, 3, 1.);
  /* #2: (@0[:3] = @1) */
  for (rr=w0+0, cs=w1; rr!=w0+3; rr+=1) *rr = *cs++;
  /* #3: @1 = @0' */
  casadi_trans(w0,casadi_s2, w1, casadi_s2, iw);
  /* #4: @2 = dense(@1) */
  casadi_densify(w1, casadi_s2, w2, 0);
  /* #5: output[0][0] = @2 */
  casadi_copy(w2, 9, res[0]);
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int df_dw(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f2(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int df_dw_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int df_dw_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void df_dw_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int df_dw_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void df_dw_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void df_dw_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void df_dw_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int df_dw_n_in(void) { return 3;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int df_dw_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real df_dw_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* df_dw_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    case 2: return "i2";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* df_dw_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* df_dw_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s1;
    case 2: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* df_dw_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int df_dw_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 5;
  if (sz_res) *sz_res = 2;
  if (sz_iw) *sz_iw = 4;
  if (sz_w) *sz_w = 15;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int df_dw_work_bytes(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 5*sizeof(const casadi_real*);
  if (sz_res) *sz_res = 2*sizeof(casadi_real*);
  if (sz_iw) *sz_iw = 4*sizeof(casadi_int);
  if (sz_w) *sz_w = 15*sizeof(casadi_real);
  return 0;
}

/* h:(i0[3x3],i1[3])->(o0[3]) */
static int casadi_f3(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_int i, j, k;
  casadi_real *rr, *w0=w+3, *w2=w+15, *w3=w+24;
  const casadi_real *cs, *ct, *wr1;
  /* #0: @0 = zeros(3x1) */
  casadi_clear(w0, 3);
  /* #1: @1 = input[0][0] */
  wr1 = arg[0] ? arg[0] : casadi_zeros;
  /* #2: @2 = @1' */
  for (i=0, rr=w2, cs=wr1; i<3; ++i) for (j=0; j<3; ++j) rr[i+j*3] = *cs++;
  /* #3: @3 = [0, 0, 1] */
  casadi_copy(casadi_c0, 3, w3);
  /* #4: @0 = mac(@2,@3,@0) */
  for (i=0, rr=w0; i<1; ++i) for (j=0; j<3; ++j, ++rr) for (k=0, cs=w2+j, ct=w3+i*3; k<3; ++k) *rr += cs[k*3]**ct++;
  /* #5: @3 = input[1][0] */
  casadi_copy(arg[1], 3, w3);
  /* #6: @0 = (@0+@3) */
  for (i=0, rr=w0, cs=w3; i<3; ++i) (*rr++) += (*cs++);
  /* #7: output[0][0] = @0 */
  casadi_copy(w0, 3, res[0]);
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int h(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f3(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int h_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int h_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void h_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int h_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void h_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void h_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void h_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int h_n_in(void) { return 2;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int h_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real h_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* h_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* h_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* h_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* h_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int h_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 5;
  if (sz_res) *sz_res = 2;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 27;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int h_work_bytes(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 5*sizeof(const casadi_real*);
  if (sz_res) *sz_res = 2*sizeof(casadi_real*);
  if (sz_iw) *sz_iw = 0*sizeof(casadi_int);
  if (sz_w) *sz_w = 27*sizeof(casadi_real);
  return 0;
}

/* dh_dx:(i0[3x3],i1[3])->(o0[3x3]) */
static int casadi_f4(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_int i, j, k;
  casadi_real *rr, *w00=w+3, *w01=w+9, *w02=w+12, *w03=w+21, w07, w08, w09, *w10=w+33, *w11=w+35, *w12=w+37, *w13=w+46;
  casadi_real *w14=w+49;
  const casadi_real *cs, *ct, *wr03;
  /* #0: @0 = zeros(3x3,6nz) */
  casadi_clear(w00, 6);
  /* #1: @1 = zeros(3x1) */
  casadi_clear(w01, 3);
  /* #2: @2 = zeros(3x3) */
  casadi_clear(w02, 9);
  /* #3: @3 = input[0][0] */
  wr03 = arg[0] ? arg[0] : casadi_zeros;
  /* #4: @4 = zeros(3x1,0nz) */
  /* #5: @5 = 00 */
  /* #6: @6 = 00 */
  /* #7: @7 = -1 */
  w07 = -1.;
  /* #8: @8 = horzcat(@5, @6, @7) */
  rr=(&w08);
  *rr++ = w07;
  /* #9: @8 = @8' */
  /* #10: @5 = 00 */
  /* #11: @7 = 1 */
  w07 = 1.;
  /* #12: @6 = 00 */
  /* #13: @9 = horzcat(@5, @7, @6) */
  rr=(&w09);
  *rr++ = w07;
  /* #14: @9 = @9' */
  /* #15: @10 = horzcat(@4, @8, @9) */
  rr=w10;
  *rr++ = w08;
  *rr++ = w09;
  /* #16: @11 = @10' */
  casadi_trans(w10,casadi_s3, w11, casadi_s3, iw);
  /* #17: @2 = mac(@3,@11,@2) */
  casadi_mtimes(wr03, casadi_s4, w11, casadi_s3, w02, casadi_s4, w, 0);
  /* #18: @12 = @2' */
  for (i=0, rr=w12, cs=w02; i<3; ++i) for (j=0; j<3; ++j) rr[i+j*3] = *cs++;
  /* #19: @13 = [0, 0, 1] */
  casadi_copy(casadi_c0, 3, w13);
  /* #20: @1 = mac(@12,@13,@1) */
  for (i=0, rr=w01; i<1; ++i) for (j=0; j<3; ++j, ++rr) for (k=0, cs=w12+j, ct=w13+i*3; k<3; ++k) *rr += cs[k*3]**ct++;
  /* #21: @11 = @1[1:3] */
  for (rr=w11, cs=w01+1; cs!=w01+3; cs+=1) *rr++ = *cs;
  /* #22: (@0[2:6:2] = @11) */
  for (rr=w00+2, cs=w11; rr!=w00+6; rr+=2) *rr = *cs++;
  /* #23: @1 = zeros(3x1) */
  casadi_clear(w01, 3);
  /* #24: @12 = zeros(3x3) */
  casadi_clear(w12, 9);
  /* #25: @4 = 00 */
  /* #26: @5 = 00 */
  /* #27: @8 = 1 */
  w08 = 1.;
  /* #28: @9 = horzcat(@4, @5, @8) */
  rr=(&w09);
  *rr++ = w08;
  /* #29: @9 = @9' */
  /* #30: @4 = zeros(3x1,0nz) */
  /* #31: @8 = -1 */
  w08 = -1.;
  /* #32: @5 = 00 */
  /* #33: @6 = 00 */
  /* #34: @7 = horzcat(@8, @5, @6) */
  rr=(&w07);
  *rr++ = w08;
  /* #35: @7 = @7' */
  /* #36: @11 = horzcat(@9, @4, @7) */
  rr=w11;
  *rr++ = w09;
  *rr++ = w07;
  /* #37: @10 = @11' */
  casadi_trans(w11,casadi_s5, w10, casadi_s5, iw);
  /* #38: @12 = mac(@3,@10,@12) */
  casadi_mtimes(wr03, casadi_s4, w10, casadi_s5, w12, casadi_s4, w, 0);
  /* #39: @2 = @12' */
  for (i=0, rr=w02, cs=w12; i<3; ++i) for (j=0; j<3; ++j) rr[i+j*3] = *cs++;
  /* #40: @1 = mac(@2,@13,@1) */
  for (i=0, rr=w01; i<1; ++i) for (j=0; j<3; ++j, ++rr) for (k=0, cs=w02+j, ct=w13+i*3; k<3; ++k) *rr += cs[k*3]**ct++;
  /* #41: @10 = @1[:4:2] */
  for (rr=w10, cs=w01+0; cs!=w01+4; cs+=2) *rr++ = *cs;
  /* #42: (@0[:10:5] = @10) */
  for (rr=w00+0, cs=w10; rr!=w00+10; rr+=5) *rr = *cs++;
  /* #43: @1 = zeros(3x1) */
  casadi_clear(w01, 3);
  /* #44: @2 = zeros(3x3) */
  casadi_clear(w02, 9);
  /* #45: @4 = 00 */
  /* #46: @9 = -1 */
  w09 = -1.;
  /* #47: @5 = 00 */
  /* #48: @7 = horzcat(@4, @9, @5) */
  rr=(&w07);
  *rr++ = w09;
  /* #49: @7 = @7' */
  /* #50: @9 = 1 */
  w09 = 1.;
  /* #51: @4 = 00 */
  /* #52: @5 = 00 */
  /* #53: @8 = horzcat(@9, @4, @5) */
  rr=(&w08);
  *rr++ = w09;
  /* #54: @8 = @8' */
  /* #55: @4 = zeros(3x1,0nz) */
  /* #56: @10 = horzcat(@7, @8, @4) */
  rr=w10;
  *rr++ = w07;
  *rr++ = w08;
  /* #57: @11 = @10' */
  casadi_trans(w10,casadi_s6, w11, casadi_s6, iw);
  /* #58: @2 = mac(@3,@11,@2) */
  casadi_mtimes(wr03, casadi_s4, w11, casadi_s6, w02, casadi_s4, w, 0);
  /* #59: @3 = @2' */
  for (i=0, rr=w03, cs=w02; i<3; ++i) for (j=0; j<3; ++j) rr[i+j*3] = *cs++;
  /* #60: @1 = mac(@3,@13,@1) */
  for (i=0, rr=w01; i<1; ++i) for (j=0; j<3; ++j, ++rr) for (k=0, cs=w03+j, ct=w13+i*3; k<3; ++k) *rr += cs[k*3]**ct++;
  /* #61: @11 = @1[:2] */
  for (rr=w11, cs=w01+0; cs!=w01+2; cs+=1) *rr++ = *cs;
  /* #62: (@0[1:5:2] = @11) */
  for (rr=w00+1, cs=w11; rr!=w00+5; rr+=2) *rr = *cs++;
  /* #63: @14 = @0' */
  casadi_trans(w00,casadi_s7, w14, casadi_s7, iw);
  /* #64: @3 = dense(@14) */
  casadi_densify(w14, casadi_s7, w03, 0);
  /* #65: output[0][0] = @3 */
  casadi_copy(w03, 9, res[0]);
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int dh_dx(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f4(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int dh_dx_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int dh_dx_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void dh_dx_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int dh_dx_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void dh_dx_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void dh_dx_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void dh_dx_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int dh_dx_n_in(void) { return 2;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int dh_dx_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real dh_dx_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* dh_dx_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* dh_dx_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* dh_dx_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* dh_dx_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int dh_dx_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 5;
  if (sz_res) *sz_res = 2;
  if (sz_iw) *sz_iw = 4;
  if (sz_w) *sz_w = 55;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int dh_dx_work_bytes(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 5*sizeof(const casadi_real*);
  if (sz_res) *sz_res = 2*sizeof(casadi_real*);
  if (sz_iw) *sz_iw = 4*sizeof(casadi_int);
  if (sz_w) *sz_w = 55*sizeof(casadi_real);
  return 0;
}

/* dh_dv:(i0[3x3],i1[3])->(o0[3x3]) */
static int casadi_f5(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real *rr, *w0=w+0, *w1=w+3, *w2=w+6;
  const casadi_real *cs;
  /* #0: @0 = zeros(3x3,3nz) */
  casadi_clear(w0, 3);
  /* #1: @1 = ones(3x1) */
  casadi_fill(w1, 3, 1.);
  /* #2: (@0[:3] = @1) */
  for (rr=w0+0, cs=w1; rr!=w0+3; rr+=1) *rr = *cs++;
  /* #3: @1 = @0' */
  casadi_trans(w0,casadi_s2, w1, casadi_s2, iw);
  /* #4: @2 = dense(@1) */
  casadi_densify(w1, casadi_s2, w2, 0);
  /* #5: output[0][0] = @2 */
  casadi_copy(w2, 9, res[0]);
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int dh_dv(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f5(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int dh_dv_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int dh_dv_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void dh_dv_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int dh_dv_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void dh_dv_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void dh_dv_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void dh_dv_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int dh_dv_n_in(void) { return 2;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int dh_dv_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real dh_dv_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* dh_dv_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* dh_dv_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* dh_dv_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* dh_dv_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int dh_dv_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 4;
  if (sz_res) *sz_res = 2;
  if (sz_iw) *sz_iw = 4;
  if (sz_w) *sz_w = 15;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int dh_dv_work_bytes(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 4*sizeof(const casadi_real*);
  if (sz_res) *sz_res = 2*sizeof(casadi_real*);
  if (sz_iw) *sz_iw = 4*sizeof(casadi_int);
  if (sz_w) *sz_w = 15*sizeof(casadi_real);
  return 0;
}


